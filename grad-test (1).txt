```
1. Write a Dockerfile to run nginx version 1.19 in a container.

Choose a base image of your liking.

The build should be security conscious and ideally pass a container
image security test. 
```

Through command line:
sudo  su -
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
docker --version

config file:

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    root /usr/share/nginx/html;
    index index.html index.htm;

    server_name _;
    location / {
        try_files $uri $uri/ =404;
    }
}

vim Dockerfile



# Pull the minimal Ubuntu image
FROM ubuntu

# Install Nginx
RUN apt-get -y update && apt-get -y install nginx=1.19.*

# Copy the Nginx config
COPY default /etc/nginx/sites-available/default

# Expose the port for access
EXPOSE 80/tcp

# Run the Nginx server
CMD ["/usr/sbin/nginx", "-g", "daemon off;"]

:wq
//creating image
docker build -t  mynginx  .
//creating container from the image
docker run --name mynginxcontainer -d -p 80:80 mynginx

For checking wheather nginx installed correctly or not
http://54.152.46.15:80

docker scan mynginx



```
2.  Write a Kubernetes StatefulSet to run the above, using persistent volume claims and
resource limits. 
```
vim pod-definition1.yml

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.19
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      # persistentVolumeReclaimPolicy: Retain
      resources:
        requests:
          storage: 1Gi
```
3. Write a simple build and deployment pipeline for the above using groovy /
Jenkinsfile, CircleCI, GitLab, or GitHub Actions. 
```

Requiremtns: Install docker, docker plugins in Jenkins, Add Jenkins user to the docker group

Groovy script:

node('master'){
 
 stage('Continuous Download') 
   
	 {
	
  checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '7d0c66bf-4a63-4385-b6b0-af1d614e247c', url: 'https://github.com/n1032658/MyJenkinsDockerExample.git']]])	}
	
    stage("build") {
 
      sh 'docker build -t  mynginx  .'
      
    }
    stage("run") {
   sh 'docker run --name mynginxcontainer -d -p 80:80 mynginx'
    
    }
  
}





